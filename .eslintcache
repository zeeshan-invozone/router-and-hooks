[{"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/index.js":"1","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/reportWebVitals.js":"2","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/App.jsx":"3","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Routes.jsx":"4","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/StyledComponents/HelloWorld.js":"5","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/HeaderNav.jsx":"6","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Home.jsx":"7","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Profile.jsx":"8","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/EditProfile.jsx":"9","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/AllProfiles.jsx":"10","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/ReactTable7/ReactTable.jsx":"11","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/utils/profilesInfo.js":"12","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/ProfileCard.jsx":"13","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/ReactTable7/TableContainer.jsx":"14","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/EditProfileModal/Skills.jsx":"15","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/AddProfileForm.jsx":"16","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Firebase/firebase.js":"17","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Assignment/TextAssignment.jsx":"18","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/Authentication.js":"19","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/SignIn.js":"20","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/SignUp.js":"21","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/AdditionalInfo.js":"22","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/PrivateRoute.js":"23","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/ForgotPassword.js":"24","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Sorting/Sorting.js":"25"},{"size":547,"mtime":1611208183288,"results":"26","hashOfConfig":"27"},{"size":364,"mtime":1611064114249,"results":"28","hashOfConfig":"27"},{"size":178,"mtime":1611604429765,"results":"29","hashOfConfig":"27"},{"size":2053,"mtime":1612146346114,"results":"30","hashOfConfig":"27"},{"size":1473,"mtime":1611293410590,"results":"31","hashOfConfig":"27"},{"size":2004,"mtime":1612146296137,"results":"32","hashOfConfig":"27"},{"size":675,"mtime":1611197825892,"results":"33","hashOfConfig":"27"},{"size":4365,"mtime":1611945137575,"results":"34","hashOfConfig":"27"},{"size":3452,"mtime":1611739759087,"results":"35","hashOfConfig":"27"},{"size":3272,"mtime":1611289994828,"results":"36","hashOfConfig":"27"},{"size":3829,"mtime":1611899399836,"results":"37","hashOfConfig":"27"},{"size":619,"mtime":1611236082013,"results":"38","hashOfConfig":"27"},{"size":2088,"mtime":1611202587614,"results":"39","hashOfConfig":"27"},{"size":1545,"mtime":1611575911044,"results":"40","hashOfConfig":"27"},{"size":1905,"mtime":1611290506308,"results":"41","hashOfConfig":"27"},{"size":4220,"mtime":1611739059469,"results":"42","hashOfConfig":"27"},{"size":452,"mtime":1611813673205,"results":"43","hashOfConfig":"27"},{"size":2104,"mtime":1611812675062,"results":"44","hashOfConfig":"27"},{"size":652,"mtime":1612113438521,"results":"45","hashOfConfig":"27"},{"size":3354,"mtime":1611916962325,"results":"46","hashOfConfig":"27"},{"size":3509,"mtime":1611916767071,"results":"47","hashOfConfig":"27"},{"size":5814,"mtime":1611902102201,"results":"48","hashOfConfig":"27"},{"size":514,"mtime":1611874733512,"results":"49","hashOfConfig":"27"},{"size":2200,"mtime":1611916860878,"results":"50","hashOfConfig":"27"},{"size":891,"mtime":1612159315900,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"r4bibs",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"54"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/index.js",[],[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/reportWebVitals.js",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/App.jsx",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Routes.jsx",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/StyledComponents/HelloWorld.js",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/HeaderNav.jsx",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Home.jsx",[],[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Profile.jsx",["113"],"import React, { useEffect, useRef, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { Typography } from '@material-ui/core';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { db, firebaseConfig } from './Firebase/firebase';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    width: 350,\n    display: 'flex',\n    justifyContent: 'space-between',\n    flexDirection: 'column',\n    marginTop: '16px',\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  gridMain: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  gridItem: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    margin: '10px',\n  },\n  control: {\n    padding: theme.spacing(2),\n  },\n  editIcon: {\n    cursor: 'pointer',\n  },\n  items: {\n    paddingBottom: '2rem',\n  },\n}));\n\nexport default function Profile() {\n  const [pData, setPdata] = useState('');\n  const classes = useStyles();\n  useEffect(() => {\n    getUserInfo();\n  }, []);\n  const getUserInfo = async () => {\n    const { uid } = firebaseConfig.auth().currentUser;\n    const user = await db.collection('users').get();\n    const profiles = [];\n    user.forEach((doc) => {\n      const profile = doc.data();\n      profiles.push(profile);\n    });\n    const finalP = profiles.filter((item) => {\n      return item.uid === uid;\n    });\n    console.log('file', finalP);\n    setPdata(finalP);\n  };\n  return (\n    <Grid container className={classes.root} spacing={2}>\n      <Grid item xs={12} className={classes.gridMain}>\n        <Paper className={classes.paper} elevation={5}>\n          <Grid container className={classes.items}>\n            <Grid item xs={12} className={classes.gridItem} my={3}>\n              <Typography>\n                <strong></strong>\n              </Typography>\n              {/* <ShowBadge /> */}\n              <EditIcon color=\"error\" className={classes.editIcon} />\n            </Grid>\n            {pData.length > 0 &&\n              pData.map((elem, index) => (\n                <Grid container key={index}>\n                  <Grid item xs={12} className=\"mt-3 mb-5\">\n                    <img\n                      src={elem.imgUrl}\n                      alt=\"profile-image\"\n                      style={{\n                        width: '100px',\n                        height: '100px',\n                        borderRadius: '50%',\n                      }}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.gridItem} my={3}>\n                    <Typography>\n                      <strong>Name</strong>\n                    </Typography>\n                    <Typography>\n                      <strong>{elem.name}</strong>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} className={classes.gridItem} my={3}>\n                    <Typography>\n                      <strong>Age</strong>\n                    </Typography>\n                    <Typography>\n                      <strong>{elem.age}</strong>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} className={classes.gridItem} my={3}>\n                    <Typography>\n                      <strong>Address</strong>\n                    </Typography>\n                    <Typography>\n                      <strong>{elem.address}</strong>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} className={classes.gridItem} my={3}>\n                    <Typography>\n                      <strong>Company</strong>\n                    </Typography>\n                    <Typography>\n                      <strong>{elem.company}</strong>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} className={classes.gridItem} my={3}>\n                    <Typography>\n                      <strong>Designation</strong>\n                    </Typography>\n                    <Typography>\n                      <strong>{elem.designation}</strong>\n                    </Typography>\n                  </Grid>\n                </Grid>\n              ))}\n          </Grid>\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n}\n","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/EditProfile.jsx",["114","115","116"],"import React, { useRef, useState } from 'react';\nimport { TextField, makeStyles, Button } from '@material-ui/core';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { firebaseConfig, db } from './Firebase/firebase';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n    width: '30%',\n    margin: 'auto',\n    textAlign: 'center',\n    marginTop: '2rem',\n  },\n  btn: {\n    '&.MuiButtonBase-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n}));\n\nexport default function EditProfile() {\n  const classes = useStyles();\n  const location = useLocation();\n  const history = useHistory();\n  const [isAdd, setIsAdd] = useState(false);\n  const nameRef = useRef();\n  const ageRef = useRef();\n  const addressRef = useRef();\n  const companyRef = useRef();\n  const designationRef = useRef();\n  const formRef = useRef();\n  const updateRef = useRef();\n  const addPRef = useRef();\n\n  const { name, age, designation, company, address, id } = location.state.data;\n  console.log('data', location.state.data);\n  const [names, setName] = useState(name);\n  const [ages, setAge] = useState(age);\n  const [designations, setDesignation] = useState(designation);\n  const [addresss, setAddress] = useState(address);\n  const [companys, setCompany] = useState(company);\n\n  const updateProfile = () => {\n    // fileData[id].name = nameRef.current.value;\n    // fileData[id].age = ageRef.current.value;\n    // fileData[id].address = addressRef.current.value;\n    // fileData[id].designation = designationRef.current.value;\n    // fileData[id].company = companyRef.current.value;\n    // const userRef = firebaseConfig.database().ref('User').child(id);\n    const userRef = db.collection('users').doc(id);\n    userRef\n      .set({\n        name: names,\n        age: ages,\n        designation: designations,\n        company: companys,\n        address: addresss,\n      })\n      .then((docRef) => {\n        console.log(docRef);\n      })\n      .catch((error) => {\n        console.error('Error adding document: ', error);\n      });\n    history.push('/');\n  };\n  return (\n    <div>\n      <form noValidate ref={formRef} autoComplete=\"off\" className={classes.root}>\n        <TextField\n          inputRef={nameRef}\n          id=\"name\"\n          label=\"Name\"\n          value={names}\n          onChange={(e) => setName(e.target.value)}\n        />\n        <TextField\n          inputRef={ageRef}\n          id=\"age\"\n          label=\"Age\"\n          value={ages}\n          onChange={(e) => setAge(e.target.value)}\n        />\n        <TextField\n          inputRef={designationRef}\n          id=\"designation\"\n          label=\"Designation\"\n          value={designations}\n          onChange={(e) => setDesignation(e.target.value)}\n        />\n        <TextField\n          inputRef={companyRef}\n          id=\"company\"\n          label=\"Company\"\n          value={companys}\n          onChange={(e) => setCompany(e.target.value)}\n        />\n        <TextField\n          inputRef={addressRef}\n          id=\"address\"\n          label=\"Address\"\n          value={addresss}\n          onChange={(e) => setAddress(e.target.value)}\n        />\n\n        <Button\n          className={classes.btn}\n          variant=\"contained\"\n          color=\"secondary\"\n          ref={updateRef}\n          onClick={updateProfile}\n        >\n          Update\n        </Button>\n      </form>\n    </div>\n  );\n}\n","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/AllProfiles.jsx",[],[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/ReactTable7/ReactTable.jsx",["117","118","119"],"import React, { useEffect, useMemo, useState } from 'react';\nimport UserData from '../../utils/profilesInfo';\nimport { useHistory } from 'react-router-dom';\nimport { Button } from '@material-ui/core';\nimport TableContainer from './TableContainer';\nimport AddProfileForm from '../AddProfileForm';\nimport { db, firebaseConfig } from '../Firebase/firebase';\n\nexport default function ReactTable() {\n  const [open, setOpen] = useState(false);\n  const [users, setUsers] = useState([]);\n  useEffect(() => {\n    getAllUsers();\n  }, []);\n  const handleOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    getAllUsers();\n    setOpen(false);\n  };\n\n  const getAllUsers = async () => {\n    // firebaseConfig\n    //   .database()\n    //   .ref('User')\n    //   .on('value', (snapshot) => {\n    //     const obj = snapshot.val();\n    //     if (obj) {\n    //       const values = Object.keys(obj).map(function (key) {\n    //         return obj[key];\n    //       });\n    //       setUsers(values);\n    //     } else {\n    //       setUsers('');\n    //     }\n    //   });\n    // const todoRef = firebaseConfig.database().ref('User');\n    // todoRef.on('value', (snapshot) => {\n    //   const user = snapshot.val();\n    //   const userList = [];\n    //   for (let id in user) {\n    //     userList.push({ id, ...user[id] });\n    //   }\n    //   setUsers(userList);\n    // });\n    const user = await db.collection('users').get();\n    const allUsers = [];\n    user.forEach((doc) => {\n      let userData = doc.data();\n      userData['id'] = doc.id;\n      console.log('userDate', userData);\n      allUsers.push(userData);\n    });\n    setUsers(allUsers);\n  };\n\n  const data = useMemo(() => users, [users]);\n  let history = useHistory();\n  const handleDelete = (e, cell) => {\n    e.preventDefault();\n    const id = cell.row.original.id;\n    db.collection('users')\n      .doc(id)\n      .delete()\n      .then(() => {\n        console.log('Document successfully deleted!');\n      })\n      .catch((error) => {\n        console.error('Error removing document: ', error);\n      });\n  };\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name', // accessor is the \"key\" in the data\n      },\n      {\n        Header: 'Age',\n        accessor: 'age',\n      },\n      {\n        Header: 'Address',\n        accessor: 'address', // accessor is the \"key\" in the data\n      },\n      {\n        Header: 'Designation',\n        accessor: 'designation',\n      },\n      {\n        Header: 'Company',\n        accessor: 'company',\n      },\n      {\n        Header: 'Delete',\n        accessor: 'delete',\n        // eslint-disable-next-line react/display-name\n        Cell: (cell) => (\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={(e) => handleDelete(e, cell)}\n          >\n            Delete\n          </Button>\n        ),\n      },\n      {\n        Header: 'Edit',\n        accessor: 'edit',\n        // eslint-disable-next-line react/display-name\n        Cell: (cell) => (\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            value={cell.accessor}\n            onClick={() =>\n              history.push('/edit', {\n                data: cell.row.original,\n              })\n            }\n          >\n            Edit\n          </Button>\n        ),\n      },\n    ],\n    []\n  );\n\n  return (\n    <div className=\"m-5 text-center\">\n      <Button\n        className=\"m-2\"\n        color=\"primary\"\n        variant=\"contained\"\n        onClick={handleOpen}\n      >\n        Add New User\n      </Button>\n      {users.length > 0 ? (\n        <TableContainer columns={columns} data={data} />\n      ) : (\n        'User not Found yet Please add new One'\n      )}\n\n      {open && <AddProfileForm show={open} onClose={handleClose} />}\n    </div>\n  );\n}\n","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/utils/profilesInfo.js",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/ProfileCard.jsx",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/ReactTable7/TableContainer.jsx",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/EditProfileModal/Skills.jsx",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/AddProfileForm.jsx",["120","121"],"import React, { useState, useRef, useEffect } from 'react';\nimport {\n  TextField,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  makeStyles,\n} from '@material-ui/core';\nimport profilesData from '../utils/profilesInfo';\nimport { useForm } from 'react-hook-form';\nimport { db, firebaseConfig } from './Firebase/firebase';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n  dialog: {\n    maxWidth: '350px',\n    minWidth: '350px',\n    textAlign: 'center',\n  },\n  error: {\n    color: 'red',\n  },\n}));\n\nexport default function AddProfileForm({ onClose, show }) {\n  const { register, handleSubmit, errors } = useForm();\n  const classes = useStyles();\n  const formRef = useRef();\n  const [name, setName] = useState('');\n  const [age, setAge] = useState('');\n  const [designation, setDesignation] = useState('');\n  const [address, setAddress] = useState('');\n  const [company, setCompany] = useState('');\n\n  const onSubmits = () => {\n    const newProfile = {\n      name,\n      age,\n      designation,\n      address,\n      company,\n    };\n    // const realUser = firebaseConfig.database().ref('User');\n    // realUser.push(newProfile);\n    db.collection('users')\n      .add({\n        name,\n        age,\n        designation,\n        address,\n        company,\n      })\n      .then((res) => {\n        alert('user created successfully');\n        console.log('res', res);\n      })\n      .catch((error) => {\n        console.log('something went wrong', error);\n      });\n    onClose();\n  };\n  const Error = ({ name }) => {\n    return <div className={classes.error}>{name}</div>;\n  };\n  return (\n    <>\n      <Dialog\n        open={show}\n        onClose={onClose}\n        aria-labelledby=\"responsive-dialog-title\"\n        className={classes.dialog}\n      >\n        <DialogContent>\n          <div className=\"text-center\">\n            <h5 className=\"dark-grey-text mb-4\">\n              <strong>New Profile</strong>\n            </h5>\n          </div>\n          <form\n            onSubmit={handleSubmit(onSubmits)}\n            autoComplete=\"off\"\n            className={classes.root}\n            ref={formRef}\n          >\n            <TextField\n              name=\"nam\"\n              label=\"Name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              inputRef={register({ required: true })}\n              helperText={errors.nam ? <Error name=\"name is required\" /> : ''}\n            />\n            <TextField\n              inputRef={register({ required: true })}\n              name=\"ag\"\n              label=\"Age\"\n              value={age}\n              onChange={(e) => setAge(e.target.value)}\n              helperText={errors.ag ? <Error name=\"age is required\" /> : ''}\n            />\n            <TextField\n              inputRef={register({ required: true })}\n              name=\"desig\"\n              label=\"Designation\"\n              value={designation}\n              onChange={(e) => setDesignation(e.target.value)}\n              helperText={\n                errors.desig ? <Error name=\"designation is required\" /> : ''\n              }\n            />\n            <TextField\n              inputRef={register({ required: true })}\n              name=\"com\"\n              label=\"Company\"\n              value={company}\n              onChange={(e) => setCompany(e.target.value)}\n              helperText={errors.com ? <Error name=\"company is required\" /> : ''}\n            />\n            <TextField\n              inputRef={register({ required: true })}\n              name=\"add\"\n              label=\"Address\"\n              value={address}\n              onChange={(e) => setAddress(e.target.value)}\n              helperText={errors.add ? <Error name=\"address is required\" /> : ''}\n            />\n            <input\n              type=\"submit\"\n              className=\"mt-3\"\n              style={{ backgroundColor: 'blue', color: 'white', padding: '3px 5px' }}\n            />\n          </form>\n        </DialogContent>\n        {/* <DialogActions>\n          <Button color=\"primary\" onClick={onClose}>\n            Cancel\n          </Button>\n        </DialogActions> */}\n      </Dialog>\n    </>\n  );\n}\n","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Firebase/firebase.js",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Assignment/TextAssignment.jsx",["122"],"import React, { useState } from 'react';\nimport { Button, TextField } from '@material-ui/core';\nexport default function TextAssignment() {\n  const [input, setInput] = useState('');\n  const [result, setResult] = useState('');\n  const [isClick, setClicked] = useState(false);\n  // const data = 'sjkdslsdjdlllooo ittsssiiiiii otspso ministernopon';\n\n  const handleSubmit = () => {\n    const temp = [];\n    if (input.length > 0) {\n      const array = input.split(' ');\n      array.forEach((item) => {\n        temp.push(maxChar(item));\n      });\n      setClicked(true);\n      setResult(temp.join(''));\n    } else {\n      setClicked(true);\n      setResult('Please enter a valid string');\n    }\n  };\n  const maxChar = (str) => {\n    const myStr = str.toLowerCase();\n    const charMap = {};\n    let max = 0;\n    let maxChar = '';\n    for (const char of myStr) {\n      if (!charMap[char]) {\n        charMap[char] = 1;\n      } else {\n        charMap[char]++;\n      }\n    }\n    console.log('charMap', charMap);\n\n    for (const char in charMap) {\n      if (charMap[char] > max) {\n        max = charMap[char];\n        maxChar = char;\n      }\n    }\n\n    return maxChar;\n  };\n\n  // const getMax = (str) => {\n  //   let max = 0;\n  //   let maxChar = '';\n  //   str.split('').forEach((char) => {\n  //     if (str.split(char).length > max) {\n  //       max = str.split(char).length;\n  //       maxChar = char;\n  //     }\n  //   });\n  //   return maxChar;\n  // };\n  return (\n    <div className=\"m-2 d-flex justify-content-center flex-column align-items-center\">\n      <TextField\n        id=\"outlined-multiline-static\"\n        multiline\n        rows={10}\n        placeholder=\"Enter Text Here\"\n        variant=\"outlined\"\n        onChange={(e) => setInput(e.target.value)}\n      />\n      <Button\n        color=\"primary\"\n        variant=\"contained\"\n        className=\"m-2\"\n        onClick={handleSubmit}\n      >\n        Submit\n      </Button>\n\n      {isClick && (\n        <div>\n          <h2>Result</h2>\n          <p style={{ backgroundColor: 'yellow', padding: '10px' }}>{result}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/Authentication.js",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/SignIn.js",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/SignUp.js",["123"],"import Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { Link, Redirect } from 'react-router-dom';\nimport React, { useCallback, useContext } from 'react';\nimport { db, firebaseConfig } from '../Firebase/firebase';\nimport { AuthContext } from './Authentication';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\nexport default function SignUp({ history }) {\n  const classes = useStyles();\n  const handleSignUp = useCallback(\n    async (event) => {\n      event.preventDefault();\n      const { email, password } = event.target.elements;\n      try {\n        const res = await firebaseConfig\n          .auth()\n          .createUserWithEmailAndPassword(email.value, password.value);\n        console.log('res', res.user.uid);\n        history.push('/step-2');\n      } catch (error) {\n        alert(error);\n      }\n    },\n    [history]\n  );\n  const { currentUser } = useContext(AuthContext);\n  if (currentUser) {\n    return <Redirect to=\"/react-table\" />;\n  }\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <form\n          onSubmit={handleSignUp}\n          className={classes.form}\n          noValidate\n          autoComplete=\"off\"\n        >\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                autoComplete=\"off\"\n                name=\"name\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"name\"\n                label=\"Name\"\n                autoFocus\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"off\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"off\"\n              />\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Sign Up\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link to=\"/login\" variant=\"body2\">\n                Already have an account? Sign in\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n    </Container>\n  );\n}\n","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/AdditionalInfo.js",["124","125","126"],"import Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { firebaseConfig, db } from '../Firebase/firebase';\nimport PersonAddRoundedIcon from '@material-ui/icons/PersonAddRounded';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\nexport default function AdditionalInfo() {\n  const [name, setName] = useState('');\n  const [age, setAge] = useState('');\n  const [designation, setDesignation] = useState('');\n  const [address, setAddress] = useState('');\n  const [company, setCompany] = useState('');\n  const [imgUrl, setImageUrl] = useState('');\n  const [isPick, setPick] = useState(false);\n  const [loader, setLoader] = useState(false);\n  const classes = useStyles();\n  const history = useHistory();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const { uid } = firebaseConfig.auth().currentUser;\n    if (uid !== null) {\n      console.log(name, age, address, designation, company);\n      db.collection('users')\n        .add({\n          uid,\n          name,\n          age,\n          address,\n          designation,\n          company,\n          imgUrl,\n        })\n        .then((res) => {\n          console.log('res', res);\n          history.push('/');\n        })\n        .catch((error) => {\n          console.log('error while adding additional info', error);\n        });\n    }\n  };\n  const imageOnChange = async (e) => {\n    setLoader(true);\n    const file = e.target.files[0];\n    const fireRef = firebaseConfig.storage().ref();\n    const fileRef = fireRef.child(file.name);\n    await fileRef.put(file);\n    const finalUrl = await fileRef.getDownloadURL();\n    setImageUrl(finalUrl);\n    setPick(true);\n    setLoader(false);\n  };\n  return (\n    <div>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className={classes.paper}>\n          <Typography component=\"h1\" variant=\"h5\">\n            Additional Info\n          </Typography>\n          {loader && <CircularProgress />}\n          <div className=\"image-upload\">\n            <label htmlFor=\"file-input\">\n              {isPick ? (\n                <img src={imgUrl} style={{ width: '100px', height: '100px' }} />\n              ) : (\n                <img\n                  src=\"https://placehold.it/100/000000/ffffff?text=UPLOAD\"\n                  style={{ cursor: 'pointer' }}\n                />\n              )}\n            </label>\n\n            <input\n              id=\"file-input\"\n              type=\"file\"\n              style={{ display: 'none' }}\n              onChange={imageOnChange}\n            />\n          </div>\n          {/* <span>\n            <PersonAddRoundedIcon />\n            <input type='file' style={{ display: 'none' }} />\n          </span> */}\n          <form className={classes.form} noValidate onSubmit={handleSubmit}>\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <TextField\n                  name=\"name\"\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  label=\"Name\"\n                  autoFocus\n                  onChange={(e) => setName(e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  label=\"Age\"\n                  name=\"age\"\n                  type=\"number\"\n                  onChange={(e) => setAge(e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  name=\"address\"\n                  label=\"Address\"\n                  type=\"text\"\n                  autoComplete=\"off\"\n                  onChange={(e) => setAddress(e.target.value)}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  name=\"company\"\n                  label=\"Company\"\n                  type=\"text\"\n                  onChange={(e) => setCompany(e.target.value)}\n                  autoComplete=\"off\"\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  name=\"designation\"\n                  label=\"Designation\"\n                  type=\"text\"\n                  autoComplete=\"off\"\n                  onChange={(e) => setDesignation(e.target.value)}\n                />\n              </Grid>\n            </Grid>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n            >\n              Profile Done\n            </Button>\n          </form>\n        </div>\n      </Container>\n    </div>\n  );\n}\n","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/PrivateRoute.js",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/ForgotPassword.js",["127","128","129"],"import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { db, firebaseConfig } from '../Firebase/firebase';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\nexport default function ForgotPassword() {\n  const [email, setEmail] = useState('');\n  const [confirm, setConfirm] = useState('');\n  const classes = useStyles();\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    firebaseConfig\n      .auth()\n      .sendPasswordResetEmail(email)\n      .then((res) => {\n        console.log('res', res);\n        alert('Email send successfully kindly check you email');\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n    console.log('email', email);\n  };\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Reset Password\n        </Typography>\n        <form onSubmit={handleSubmit} className={classes.form} noValidate>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Email Address\"\n            name=\"email\"\n            autoFocus\n            onChange={(e) => setEmail(e.target.value)}\n          />\n\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Send\n          </Button>\n        </form>\n      </div>\n    </Container>\n  );\n}\n","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Sorting/Sorting.js",["130"],{"ruleId":"131","severity":1,"message":"132","line":59,"column":5,"nodeType":"133","messageId":"134","endLine":59,"endColumn":16},{"ruleId":"131","severity":1,"message":"132","line":39,"column":3,"nodeType":"133","messageId":"134","endLine":39,"endColumn":14},{"ruleId":"131","severity":1,"message":"132","line":63,"column":9,"nodeType":"133","messageId":"134","endLine":63,"endColumn":20},{"ruleId":"131","severity":1,"message":"132","line":66,"column":9,"nodeType":"133","messageId":"134","endLine":66,"endColumn":22},{"ruleId":"131","severity":1,"message":"132","line":52,"column":7,"nodeType":"133","messageId":"134","endLine":52,"endColumn":18},{"ruleId":"131","severity":1,"message":"132","line":67,"column":9,"nodeType":"133","messageId":"134","endLine":67,"endColumn":20},{"ruleId":"131","severity":1,"message":"132","line":70,"column":9,"nodeType":"133","messageId":"134","endLine":70,"endColumn":22},{"ruleId":"131","severity":1,"message":"132","line":60,"column":9,"nodeType":"133","messageId":"134","endLine":60,"endColumn":20},{"ruleId":"131","severity":1,"message":"132","line":63,"column":9,"nodeType":"133","messageId":"134","endLine":63,"endColumn":20},{"ruleId":"131","severity":1,"message":"132","line":35,"column":5,"nodeType":"133","messageId":"134","endLine":35,"endColumn":16},{"ruleId":"131","severity":1,"message":"132","line":42,"column":9,"nodeType":"133","messageId":"134","endLine":42,"endColumn":20},{"ruleId":"131","severity":1,"message":"132","line":48,"column":7,"nodeType":"133","messageId":"134","endLine":48,"endColumn":18},{"ruleId":"131","severity":1,"message":"132","line":60,"column":11,"nodeType":"133","messageId":"134","endLine":60,"endColumn":22},{"ruleId":"131","severity":1,"message":"132","line":64,"column":11,"nodeType":"133","messageId":"134","endLine":64,"endColumn":22},{"ruleId":"131","severity":1,"message":"132","line":39,"column":9,"nodeType":"133","messageId":"134","endLine":39,"endColumn":20},{"ruleId":"131","severity":1,"message":"132","line":43,"column":9,"nodeType":"133","messageId":"134","endLine":43,"endColumn":20},{"ruleId":"131","severity":1,"message":"132","line":45,"column":5,"nodeType":"133","messageId":"134","endLine":45,"endColumn":16},{"ruleId":"131","severity":1,"message":"132","line":27,"column":5,"nodeType":"133","messageId":"134","endLine":27,"endColumn":16},"no-console","Unexpected console statement.","MemberExpression","unexpected"]
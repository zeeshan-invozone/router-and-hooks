[{"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/index.tsx":"1","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/App.tsx":"2","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/Stores.ts":"3","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Routes.tsx":"4","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/Reducers/index.ts":"5","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Firebase/firebase.ts":"6","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/Example.tsx":"7","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/StyledComponents/HelloWorld.tsx":"8","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Assignment/TextAssignment.tsx":"9","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/Authentication.tsx":"10","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/ForgotPassword.tsx":"11","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/PrivateRoute.tsx":"12","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Sorting/Sorting.tsx":"13","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/ReactTable7/ReactTable.tsx":"14","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/SignUp.tsx":"15","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/SignIn.tsx":"16","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/ResetPassword.tsx":"17","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/CouldFunc/CloudFunctions.tsx":"18","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/AdditionalInfo.tsx":"19","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/Reducers/UserReducer.ts":"20","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/Reducers/CounterReducer.ts":"21","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Firebase/firebase_api.ts":"22","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/ReactTable7/TableContainer.tsx":"23","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/Actions/index.ts":"24","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/Types/index.ts":"25","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Assignment/AddProfileForm.tsx":"26","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Assignment/HeaderNav.tsx":"27","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Profile/EditProfile.tsx":"28","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Profile/Profile.tsx":"29","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/Reducers/GetData.ts":"30","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/Sagas/index.tsx":"31","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/Sagas/login.tsx":"32","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/ReduxSouce/rootReducer.ts":"33","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/ReduxSouce/Types.ts":"34","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/ReduxSouce/rootActions.ts":"35"},{"size":745,"mtime":1613540230935,"results":"36","hashOfConfig":"37"},{"size":154,"mtime":1613028574849,"results":"38","hashOfConfig":"37"},{"size":1130,"mtime":1613540949479,"results":"39","hashOfConfig":"37"},{"size":2428,"mtime":1613366106961,"results":"40","hashOfConfig":"37"},{"size":435,"mtime":1613467960169,"results":"41","hashOfConfig":"37"},{"size":881,"mtime":1613040710344,"results":"42","hashOfConfig":"37"},{"size":1421,"mtime":1613541988894,"results":"43","hashOfConfig":"37"},{"size":1490,"mtime":1612869287392,"results":"44","hashOfConfig":"37"},{"size":2051,"mtime":1612869287396,"results":"45","hashOfConfig":"37"},{"size":664,"mtime":1612869287392,"results":"46","hashOfConfig":"37"},{"size":1825,"mtime":1612869287392,"results":"47","hashOfConfig":"37"},{"size":514,"mtime":1612869287392,"results":"48","hashOfConfig":"37"},{"size":1257,"mtime":1612869287392,"results":"49","hashOfConfig":"37"},{"size":3717,"mtime":1613365804105,"results":"50","hashOfConfig":"37"},{"size":3258,"mtime":1612869287392,"results":"51","hashOfConfig":"37"},{"size":3536,"mtime":1613539386455,"results":"52","hashOfConfig":"37"},{"size":2018,"mtime":1612869287376,"results":"53","hashOfConfig":"37"},{"size":2306,"mtime":1612869287396,"results":"54","hashOfConfig":"37"},{"size":5141,"mtime":1612940924903,"results":"55","hashOfConfig":"37"},{"size":856,"mtime":1613539182574,"results":"56","hashOfConfig":"37"},{"size":338,"mtime":1613025883141,"results":"57","hashOfConfig":"37"},{"size":1804,"mtime":1612869287376,"results":"58","hashOfConfig":"37"},{"size":1565,"mtime":1612869287392,"results":"59","hashOfConfig":"37"},{"size":641,"mtime":1613463644653,"results":"60","hashOfConfig":"37"},{"size":335,"mtime":1613406322235,"results":"61","hashOfConfig":"37"},{"size":3905,"mtime":1613365896898,"results":"62","hashOfConfig":"37"},{"size":2596,"mtime":1613513649150,"results":"63","hashOfConfig":"37"},{"size":3372,"mtime":1613366217838,"results":"64","hashOfConfig":"37"},{"size":4369,"mtime":1613366231067,"results":"65","hashOfConfig":"37"},{"size":327,"mtime":1613380365474,"results":"66","hashOfConfig":"37"},{"size":151,"mtime":1613459952005,"results":"67","hashOfConfig":"37"},{"size":1010,"mtime":1613539174956,"results":"68","hashOfConfig":"37"},{"size":546,"mtime":1613540907601,"results":"69","hashOfConfig":"37"},{"size":170,"mtime":1613540902805,"results":"70","hashOfConfig":"37"},{"size":267,"mtime":1613540842474,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"r4bibs",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"83"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"74"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"74"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"74"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"74"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/index.tsx",[],[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/App.tsx",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/Stores.ts",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Routes.tsx",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/Reducers/index.ts",[],[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Firebase/firebase.ts",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/Example.tsx",["156"],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/StyledComponents/HelloWorld.tsx",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Assignment/TextAssignment.tsx",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/Authentication.tsx",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/ForgotPassword.tsx",["157"],"import React, { useState, FormEvent } from 'react';\nimport {\n  makeStyles,\n  CssBaseline,\n  Typography,\n  TextField,\n  Button,\n  Container,\n} from '@material-ui/core';\nimport { FORGOT_PASSWORD } from '../Firebase/firebase_api';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\nconst ForgotPassword: React.FC = () => {\n  const [email, setEmail] = useState<string>('');\n  const classes = useStyles();\n  const handleSubmit = async (evt: FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n    const res = await FORGOT_PASSWORD({ email });\n    console.log('res', res);\n  };\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Reset Password\n        </Typography>\n        <form onSubmit={handleSubmit} className={classes.form} noValidate>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Email Address\"\n            name=\"email\"\n            autoFocus\n            onChange={(e) => setEmail(e.target.value)}\n          />\n\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Send\n          </Button>\n        </form>\n      </div>\n    </Container>\n  );\n};\n\nexport default ForgotPassword;\n","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/PrivateRoute.tsx",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Sorting/Sorting.tsx",["158"],"import React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport './sorting.css';\nconst options = [\n  { label: 'zeeshan', value: '1' },\n  { label: 'akram', value: '2' },\n  { label: 'amir', value: '3' },\n  { label: 'rizwan', value: '4' },\n  { label: 'naeem', value: '5' },\n  { label: 'the naeem', value: '6' },\n  { label: 'The Ahmed', value: '7' },\n  { label: 'Ali Ahmed', value: '8' },\n];\nconst Sorting = () => {\n  const [sort, setSort] = useState([]);\n\n  const arrarySort = (opt) => {\n    const newOptions = opt.map((item) => {\n      const result = item.label.trim().replace(/the/gi, '');\n      const newResult = result.trim().replace(/\\s/g, '_');\n      const obj = { label: newResult, value: item.value };\n      return obj;\n    });\n    const byName = newOptions.slice(0);\n    byName.sort((a, b) => {\n      const x = a.label.toLowerCase();\n      const y = b.label.toLowerCase();\n      return x < y ? -1 : x > y ? 1 : 0;\n    });\n    setSort(byName);\n  };\n  useEffect(() => {\n    arrarySort(options);\n  }, []);\n\n  const handleChange = (e) => {\n    const current = e.target.id;\n    console.log(current);\n  };\n  return (\n    <div>\n      <Select options={sort} onChange={handleChange} />\n    </div>\n  );\n};\n\nexport default Sorting;\n","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/ReactTable7/ReactTable.tsx",["159"],"import React, { useEffect, useMemo, useState } from 'react';\nimport UserData from '../../utils/profilesInfo';\nimport { useHistory } from 'react-router-dom';\nimport { Button } from '@material-ui/core';\nimport TableContainer from './TableContainer';\nimport AddProfileForm from '../Assignment/AddProfileForm';\nimport firebase from '../Firebase/firebase';\n\nconst ReactTable = () => {\n  const [open, setOpen] = useState(false);\n  const [users, setUsers] = useState([]);\n  const fire = firebase.firestore();\n  useEffect(() => {\n    getAllUsers();\n  }, []);\n  const handleOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    getAllUsers();\n    setOpen(false);\n  };\n\n  const getAllUsers = async () => {\n    // firebaseConfig\n    //   .database()\n    //   .ref('User')\n    //   .on('value', (snapshot) => {\n    //     const obj = snapshot.val();\n    //     if (obj) {\n    //       const values = Object.keys(obj).map(function (key) {\n    //         return obj[key];\n    //       });\n    //       setUsers(values);\n    //     } else {\n    //       setUsers('');\n    //     }\n    //   });\n    // const todoRef = firebaseConfig.database().ref('User');\n    // todoRef.on('value', (snapshot) => {\n    //   const user = snapshot.val();\n    //   const userList = [];\n    //   for (let id in user) {\n    //     userList.push({ id, ...user[id] });\n    //   }\n    //   setUsers(userList);\n    // });\n    const user = await fire.collection('users').get();\n    const allUsers = [];\n    user.forEach((doc) => {\n      let userData = doc.data();\n      userData['id'] = doc.id;\n      console.log('userDate', userData);\n      allUsers.push(userData);\n    });\n    setUsers(allUsers);\n  };\n\n  const data = useMemo(() => users, [users]);\n  let history = useHistory();\n  const handleDelete = async (e, cell) => {\n    e.preventDefault();\n    const id = cell.row.original.id;\n\n    const res = await fire.collection('users').doc(id).delete();\n  };\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: 'Name',\n        accessor: 'name', // accessor is the \"key\" in the data\n      },\n      {\n        Header: 'Age',\n        accessor: 'age',\n      },\n      {\n        Header: 'Address',\n        accessor: 'address', // accessor is the \"key\" in the data\n      },\n      {\n        Header: 'Designation',\n        accessor: 'designation',\n      },\n      {\n        Header: 'Company',\n        accessor: 'company',\n      },\n      {\n        Header: 'Delete',\n        accessor: 'delete',\n        // eslint-disable-next-line react/display-name\n        Cell: (cell) => (\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={(e) => handleDelete(e, cell)}\n          >\n            Delete\n          </Button>\n        ),\n      },\n      {\n        Header: 'Edit',\n        accessor: 'edit',\n        // eslint-disable-next-line react/display-name\n        Cell: (cell) => (\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            value={cell.accessor}\n            onClick={() =>\n              history.push('/edit', {\n                data: cell.row.original,\n              })\n            }\n          >\n            Edit\n          </Button>\n        ),\n      },\n    ],\n    []\n  );\n\n  return (\n    <div className=\"m-5 text-center\">\n      <Button\n        className=\"m-2\"\n        color=\"primary\"\n        variant=\"contained\"\n        onClick={handleOpen}\n      >\n        Add New User\n      </Button>\n      {users.length > 0 ? (\n        <TableContainer columns={columns} data={data} />\n      ) : (\n        'User not Found yet Please add new One'\n      )}\n\n      {open && <AddProfileForm show={open} onClose={handleClose} />}\n    </div>\n  );\n};\n\nexport default ReactTable;\n","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/SignUp.tsx",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/SignIn.tsx",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/ResetPassword.tsx",["160"],"import React, { FormEvent, useState } from 'react';\nimport { Grid, Typography, TextField, Button, Container } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport { RESET_PASSWORD } from '../Firebase/firebase_api';\n\nconst ResetPassword: React.FC = () => {\n  const [password, setPassword] = useState<string>(null);\n  const [confPassword, setConfPassword] = useState<string>(null);\n  const history = useHistory();\n\n  const handleSubmit = async (evt: FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n    var url_string = window.location.search;\n    const urlParams = new URLSearchParams(url_string);\n    const code = urlParams.get('oobCode');\n    if (password === confPassword) {\n      await RESET_PASSWORD({ code, password });\n      alert('Password reset Successfully');\n      history.push('/login');\n    } else {\n      console.log('password does not matched');\n    }\n  };\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <div>\n        <Typography component=\"h1\" variant=\"h5\">\n          Reset Password\n        </Typography>\n        <form noValidate onSubmit={handleSubmit}>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"password\"\n            label=\"Password\"\n            name=\"password\"\n            autoComplete=\"off\"\n            autoFocus\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"conf-password\"\n            label=\"confirm-Password\"\n            type=\"conf-password\"\n            id=\"conf-password\"\n            autoComplete=\"off\"\n            onChange={(e) => setConfPassword(e.target.value)}\n          />\n          <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\">\n            Done\n          </Button>\n        </form>\n      </div>\n    </Container>\n  );\n};\n\nexport default ResetPassword;\n","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/CouldFunc/CloudFunctions.tsx",["161"],"import React, { useRef, useState } from 'react';\nimport {\n  Container,\n  Typography,\n  TextField,\n  Button,\n  makeStyles,\n} from '@material-ui/core';\nimport firebase from '../Firebase/firebase';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\nconst CloudFunctions: React.FC = () => {\n  const [fullName, setFullName] = useState<string>(null);\n  const classes = useStyles();\n  const formRef = useRef<HTMLFormElement>(null);\n\n  const handleSubmit = async (evt) => {\n    evt.preventDefault();\n    const fName = formRef.current['firstname'].value;\n    const lName = formRef.current['lastname'].value;\n    console.log(fName, lName);\n    const fullName = firebase.functions().httpsCallable('getFullName');\n    const res = await fullName({ fName, lName });\n    if (res) {\n      setFullName(res.data.fullName);\n    }\n  };\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h5\">\n          Cloud Functions\n        </Typography>\n        <form\n          onSubmit={handleSubmit}\n          className={classes.form}\n          noValidate\n          ref={formRef}\n        >\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"firstname\"\n            label=\"First Name\"\n            name=\"firstname\"\n            autoComplete=\"firstname\"\n            autoFocus\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"lastname\"\n            label=\"LastName\"\n            type=\"lastname\"\n            id=\"lastname\"\n            autoComplete=\"lastname\"\n          />\n\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Submit\n          </Button>\n        </form>\n      </div>\n      <div>{fullName}</div>\n    </Container>\n  );\n};\n\nexport default CloudFunctions;\n","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/auth/AdditionalInfo.tsx",["162"],"import {\n  Grid,\n  makeStyles,\n  CssBaseline,\n  Typography,\n  TextField,\n  Button,\n  Container,\n  CircularProgress,\n} from '@material-ui/core';\nimport React, { useState, FormEvent, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport firebase from '../Firebase/firebase';\nimport { CREATE_USER_PROFILE } from '../Firebase/firebase_api';\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\nconst AdditionalInfo: React.FC = () => {\n  const formRef = useRef<HTMLFormElement>(null);\n  const [imageUrl, setImageUrl] = useState<string>('');\n  const [isPick, setPick] = useState<boolean>(false);\n  const [loader, setLoader] = useState<boolean>(false);\n  const classes = useStyles();\n  const history = useHistory();\n\n  const handleSubmit = async (evt: FormEvent<HTMLFormElement>) => {\n    evt.preventDefault();\n\n    const name = formRef.current['fname'].value;\n    const designation = formRef.current['designation'].value;\n    const address = formRef.current['address'].value;\n    const age = formRef.current['age'].value;\n    const company = formRef.current['company'].value;\n\n    const { uid } = firebase.auth().currentUser;\n    if (uid !== null) {\n      const res = await CREATE_USER_PROFILE({\n        uid,\n        name,\n        age,\n        address,\n        company,\n        designation,\n        imageUrl,\n      });\n      console.log('res', res);\n      history.push('/');\n    }\n  };\n  const imageOnChange = async (evt: React.ChangeEvent<HTMLInputElement>) => {\n    setLoader(true);\n    const file = evt.target.files[0];\n    const fireRef = firebase.storage().ref();\n    const fileRef = fireRef.child(file.name);\n    await fileRef.put(file);\n    const finalUrl = await fileRef.getDownloadURL();\n    setImageUrl(finalUrl);\n    setPick(true);\n    setLoader(false);\n  };\n  return (\n    <div>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className={classes.paper}>\n          <Typography component=\"h1\" variant=\"h5\">\n            Additional Info\n          </Typography>\n          {loader && <CircularProgress />}\n          <div className=\"image-upload\">\n            <label htmlFor=\"file-input\">\n              {isPick ? (\n                <img src={imageUrl} style={{ width: '100px', height: '100px' }} />\n              ) : (\n                <img\n                  src=\"https://placehold.it/100/000000/ffffff?text=UPLOAD\"\n                  style={{ cursor: 'pointer' }}\n                />\n              )}\n            </label>\n\n            <input\n              id=\"file-input\"\n              type=\"file\"\n              style={{ display: 'none' }}\n              onChange={imageOnChange}\n            />\n          </div>\n          <form\n            className={classes.form}\n            noValidate\n            onSubmit={handleSubmit}\n            ref={formRef}\n          >\n            <Grid container spacing={2}>\n              <Grid item xs={12}>\n                <TextField\n                  name=\"fname\"\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  label=\"Name\"\n                  autoFocus\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  label=\"Age\"\n                  name=\"age\"\n                  type=\"number\"\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  name=\"address\"\n                  label=\"Address\"\n                  type=\"text\"\n                  autoComplete=\"off\"\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  name=\"company\"\n                  label=\"Company\"\n                  type=\"text\"\n                  autoComplete=\"off\"\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  variant=\"outlined\"\n                  required\n                  fullWidth\n                  name=\"designation\"\n                  label=\"Designation\"\n                  type=\"text\"\n                  autoComplete=\"off\"\n                />\n              </Grid>\n            </Grid>\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n            >\n              Profile Done\n            </Button>\n          </form>\n        </div>\n      </Container>\n    </div>\n  );\n};\n\nexport default AdditionalInfo;\n","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/Reducers/UserReducer.ts",["163"],"import { LOGIN_USER, LOG_OUT, LOGIN_FALIURE, LOGIN_SUCCESS } from '../Types';\nconst initialState = {\n  isLogged: false,\n  loggedData: {},\n  error: '',\n};\nconst UserReducer = (state = initialState, action: any) => {\n  console.log('user reducer action', action.payload);\n  switch (action.type) {\n    case LOGIN_USER:\n      return {\n        ...state,\n        loggedData: action.payload,\n      };\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        loggedData: action.data,\n        isLogged: true,\n        error: '',\n      };\n    case LOGIN_FALIURE:\n      return {\n        ...state,\n        isLogged: false,\n        loggedData: {},\n        error: action.data,\n      };\n    case LOG_OUT:\n      return {\n        ...state,\n        loggedData: {},\n        isLogged: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default UserReducer;\n","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/Reducers/CounterReducer.ts",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Firebase/firebase_api.ts",["164"],"import firebase from './firebase';\n\ntype FP = {\n  email: string;\n};\n\ntype REGISTRATION = {\n  email: string;\n  password: string;\n};\n\ntype USER = {\n  name: string;\n  age: string;\n  address: string;\n  company: string;\n  designation: string;\n  uid: string;\n  imageUrl: string;\n};\n\ntype RESET = {\n  code: string;\n  password: string;\n};\n\nexport const SIGN_UP = async (reg: REGISTRATION) => {\n  try {\n    return await firebase\n      .auth()\n      .createUserWithEmailAndPassword(reg.email, reg.password);\n  } catch (error) {\n    return error.message;\n  }\n};\n\nexport const FORGOT_PASSWORD = async (forgot: FP) => {\n  try {\n    return await firebase.auth().sendPasswordResetEmail(forgot.email);\n  } catch (error) {\n    return error.message;\n  }\n};\nexport const RESET_PASSWORD = async (reset: RESET) => {\n  try {\n    return await firebase.auth().confirmPasswordReset(reset.code, reset.password);\n  } catch (error) {\n    return error.message;\n  }\n};\n\nexport const SIGN_OUT = async () => {\n  try {\n    return await firebase.auth().signOut();\n  } catch (error) {\n    return error.message;\n  }\n};\n\nexport const SIGN_IN = async (signin: REGISTRATION) => {\n  try {\n    return await firebase\n      .auth()\n      .signInWithEmailAndPassword(signin.email, signin.password);\n  } catch (error) {\n    return error.message;\n  }\n};\n\nexport const CREATE_USER_PROFILE = async (user: USER) => {\n  try {\n    const db = firebase.firestore();\n    const newUser = {\n      uid: user.uid,\n      name: user.name,\n      age: user.age,\n      address: user.address,\n      company: user.company,\n      designation: user.designation,\n      imageUrl: user.imageUrl,\n    };\n    const res = await db.collection('users').doc(user.uid).set(newUser);\n    console.log('res', res);\n    return res;\n  } catch (error) {\n    return error.message;\n  }\n};\n","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/ReactTable7/TableContainer.tsx",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/Actions/index.ts",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/Types/index.ts",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Assignment/AddProfileForm.tsx",["165"],"import React, { useState, useRef, useEffect } from 'react';\nimport {\n  TextField,\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  makeStyles,\n} from '@material-ui/core';\nimport profilesData from '../../utils/profilesInfo';\nimport { useForm } from 'react-hook-form';\nimport firebase from '../Firebase/firebase';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n  dialog: {\n    maxWidth: '350px',\n    minWidth: '350px',\n    textAlign: 'center',\n  },\n  error: {\n    color: 'red',\n  },\n}));\n\nconst AddProfileForm = ({ onClose, show }) => {\n  const { register, handleSubmit, errors } = useForm();\n  const classes = useStyles();\n  const formRef = useRef<HTMLFormElement>();\n  const name: string = formRef.current['names'].value;\n  const designation: string = formRef.current['designation'].value;\n  const address: string = formRef.current['address'].value;\n  const age: string = formRef.current['age'].value;\n  const company: string = formRef.current['company'].value;\n\n  const fire = firebase.firestore();\n  const onSubmits = async () => {\n    const newProfile = {\n      name,\n      age,\n      designation,\n      address,\n      company,\n    };\n    // const realUser = firebaseConfig.database().ref('User');\n    // realUser.push(newProfile);\n    const res = await fire.collection('users').add({\n      name,\n      age,\n      designation,\n      address,\n      company,\n    });\n    console.log('res', res);\n    onClose();\n  };\n  const Error = ({ name }) => {\n    return <div className={classes.error}>{name}</div>;\n  };\n  return (\n    <>\n      <Dialog\n        open={show}\n        onClose={onClose}\n        aria-labelledby=\"responsive-dialog-title\"\n        className={classes.dialog}\n      >\n        <DialogContent>\n          <div className=\"text-center\">\n            <h5 className=\"dark-grey-text mb-4\">\n              <strong>New Profile</strong>\n            </h5>\n          </div>\n          <form\n            onSubmit={handleSubmit(onSubmits)}\n            autoComplete=\"off\"\n            className={classes.root}\n            ref={formRef}\n          >\n            <TextField\n              name=\"names\"\n              label=\"Name\"\n              value={name}\n              inputRef={register({ required: true })}\n              helperText={errors.nam ? <Error name=\"name is required\" /> : ''}\n            />\n            <TextField\n              inputRef={register({ required: true })}\n              name=\"ag\"\n              label=\"Age\"\n              value={age}\n              helperText={errors.ag ? <Error name=\"age is required\" /> : ''}\n            />\n            <TextField\n              inputRef={register({ required: true })}\n              name=\"desig\"\n              label=\"Designation\"\n              value={designation}\n              helperText={\n                errors.desig ? <Error name=\"designation is required\" /> : ''\n              }\n            />\n            <TextField\n              inputRef={register({ required: true })}\n              name=\"com\"\n              label=\"Company\"\n              value={company}\n              helperText={errors.com ? <Error name=\"company is required\" /> : ''}\n            />\n            <TextField\n              inputRef={register({ required: true })}\n              name=\"add\"\n              label=\"Address\"\n              value={address}\n              helperText={errors.add ? <Error name=\"address is required\" /> : ''}\n            />\n            <input\n              type=\"submit\"\n              className=\"mt-3\"\n              style={{ backgroundColor: 'blue', color: 'white', padding: '3px 5px' }}\n            />\n          </form>\n        </DialogContent>\n        {/* <DialogActions>\n          <Button color=\"primary\" onClick={onClose}>\n            Cancel\n          </Button>\n        </DialogActions> */}\n      </Dialog>\n    </>\n  );\n};\nexport default AddProfileForm;\n","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Assignment/HeaderNav.tsx",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Profile/EditProfile.tsx",["166","167"],"import React, { useRef, useState } from 'react';\nimport { TextField, makeStyles, Button } from '@material-ui/core';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport firebase from '../Firebase/firebase';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n    width: '30%',\n    margin: 'auto',\n    textAlign: 'center',\n    marginTop: '2rem',\n  },\n  btn: {\n    '&.MuiButtonBase-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n}));\n\nconst EditProfile = () => {\n  const classes = useStyles();\n  const location = useLocation();\n  const history = useHistory();\n  const [isAdd, setIsAdd] = useState(false);\n  const nameRef = useRef();\n  const ageRef = useRef();\n  const addressRef = useRef();\n  const companyRef = useRef();\n  const designationRef = useRef();\n  const formRef = useRef();\n  const updateRef = useRef();\n  const addPRef = useRef();\n\n  const { name, age, designation, company, address, id } = location.state.data;\n  console.log('data', location.state.data);\n  const [names, setName] = useState(name);\n  const [ages, setAge] = useState(age);\n  const [designations, setDesignation] = useState(designation);\n  const [addresss, setAddress] = useState(address);\n  const [companys, setCompany] = useState(company);\n  const fire = firebase.firestore();\n  const updateProfile = async () => {\n    // fileData[id].name = nameRef.current.value;\n    // fileData[id].age = ageRef.current.value;\n    // fileData[id].address = addressRef.current.value;\n    // fileData[id].designation = designationRef.current.value;\n    // fileData[id].company = companyRef.current.value;\n    // const userRef = firebaseConfig.database().ref('User').child(id);\n    const userRef = fire.collection('users').doc(id);\n    const res = await userRef.set({\n      name: names,\n      age: ages,\n      designation: designations,\n      company: companys,\n      address: addresss,\n    });\n    console.log('res', res);\n    history.push('/');\n  };\n  return (\n    <div>\n      <form noValidate ref={formRef} autoComplete=\"off\" className={classes.root}>\n        <TextField\n          inputRef={nameRef}\n          id=\"name\"\n          label=\"Name\"\n          value={names}\n          onChange={(e) => setName(e.target.value)}\n        />\n        <TextField\n          inputRef={ageRef}\n          id=\"age\"\n          label=\"Age\"\n          value={ages}\n          onChange={(e) => setAge(e.target.value)}\n        />\n        <TextField\n          inputRef={designationRef}\n          id=\"designation\"\n          label=\"Designation\"\n          value={designations}\n          onChange={(e) => setDesignation(e.target.value)}\n        />\n        <TextField\n          inputRef={companyRef}\n          id=\"company\"\n          label=\"Company\"\n          value={companys}\n          onChange={(e) => setCompany(e.target.value)}\n        />\n        <TextField\n          inputRef={addressRef}\n          id=\"address\"\n          label=\"Address\"\n          value={addresss}\n          onChange={(e) => setAddress(e.target.value)}\n        />\n\n        <Button\n          className={classes.btn}\n          variant=\"contained\"\n          color=\"secondary\"\n          ref={updateRef}\n          onClick={updateProfile}\n        >\n          Update\n        </Button>\n      </form>\n    </div>\n  );\n};\nexport default EditProfile;\n","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Profile/Profile.tsx",["168"],"import React, { useEffect, useRef, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { Typography } from '@material-ui/core';\nimport EditIcon from '@material-ui/icons/Edit';\nimport firebase from '../Firebase/firebase';\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    width: 350,\n    display: 'flex',\n    justifyContent: 'space-between',\n    flexDirection: 'column',\n    marginTop: '16px',\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  gridMain: {\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  gridItem: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    margin: '10px',\n  },\n  control: {\n    padding: theme.spacing(2),\n  },\n  editIcon: {\n    cursor: 'pointer',\n  },\n  items: {\n    paddingBottom: '2rem',\n  },\n}));\n\nconst Profile: React.FC = () => {\n  const [pData, setPdata] = useState([]);\n  const fire = firebase.firestore();\n  const classes = useStyles();\n\n  useEffect(() => {\n    getUserInfo();\n  }, []);\n\n  const getUserInfo = async () => {\n    const { uid } = firebase.auth().currentUser;\n    const user = await fire.collection('users').get();\n    const profiles = [];\n    user.forEach((doc) => {\n      const profile = doc.data();\n      profiles.push(profile);\n    });\n    const finalP = profiles.filter((item) => {\n      return item.uid === uid;\n    });\n    console.log('file', finalP);\n    setPdata(finalP);\n  };\n  return (\n    <Grid container className={classes.root} spacing={2}>\n      <Grid item xs={12} className={classes.gridMain}>\n        <Paper className={classes.paper} elevation={5}>\n          <Grid container className={classes.items}>\n            <Grid item xs={12} className={classes.gridItem}>\n              <Typography>\n                <strong></strong>\n              </Typography>\n              {/* <ShowBadge /> */}\n              <EditIcon color=\"error\" className={classes.editIcon} />\n            </Grid>\n            {pData.length > 0 &&\n              pData.map((elem, index) => (\n                <Grid container key={index}>\n                  <Grid item xs={12} className=\"mt-3 mb-5\">\n                    <img\n                      src={elem.imgUrl}\n                      alt=\"profile-image\"\n                      style={{\n                        width: '100px',\n                        height: '100px',\n                        borderRadius: '50%',\n                      }}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className={classes.gridItem}>\n                    <Typography>\n                      <strong>Name</strong>\n                    </Typography>\n                    <Typography>\n                      <strong>{elem.name}</strong>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} className={classes.gridItem}>\n                    <Typography>\n                      <strong>Age</strong>\n                    </Typography>\n                    <Typography>\n                      <strong>{elem.age}</strong>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} className={classes.gridItem}>\n                    <Typography>\n                      <strong>Address</strong>\n                    </Typography>\n                    <Typography>\n                      <strong>{elem.address}</strong>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} className={classes.gridItem}>\n                    <Typography>\n                      <strong>Company</strong>\n                    </Typography>\n                    <Typography>\n                      <strong>{elem.company}</strong>\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12} className={classes.gridItem}>\n                    <Typography>\n                      <strong>Designation</strong>\n                    </Typography>\n                    <Typography>\n                      <strong>{elem.designation}</strong>\n                    </Typography>\n                  </Grid>\n                </Grid>\n              ))}\n          </Grid>\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Profile;\n","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/Reducers/GetData.ts",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/Sagas/index.tsx",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/Sagas/login.tsx",["169","170"],"import { call, put, takeEvery } from 'redux-saga/effects';\nimport { push } from 'connected-react-router';\nimport { LOGIN_USER, LOGIN_FALIURE, LOG_OUT, LOGIN_SUCCESS } from '../Types';\nimport { SIGN_IN, SIGN_OUT } from '../../Firebase/firebase_api';\nimport firebase from '../../Firebase/firebase';\n\nconst auth = firebase.auth();\n\nfunction* login(action: any) {\n  console.log('yield action', action.payload);\n  try {\n    const userData = yield call(SIGN_IN, action.payload);\n    var user = auth.currentUser;\n    if (user) {\n      yield put({ type: LOGIN_SUCCESS, data: userData });\n    } else {\n      yield put({ type: LOGIN_FALIURE, data: {} });\n    }\n    yield put(push('/'));\n  } catch (error) {\n    yield put({ type: LOGIN_FALIURE, data: error.message });\n  }\n}\n\nfunction* logOut(action: any) {\n  console.log('saga logout');\n  yield call(SIGN_OUT);\n  yield put(push('/login'));\n}\n\nfunction* loginSaga() {\n  yield takeEvery(LOGIN_USER, login);\n  yield takeEvery(LOG_OUT, logOut);\n}\n\nexport default loginSaga;\n","/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/ReduxSouce/rootReducer.ts",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/ReduxSouce/Types.ts",[],"/home/zeeshan-invozone/Invozone/training/learn-hooks/src/components/Redux/ReduxSouce/rootActions.ts",[],{"ruleId":"171","severity":1,"message":"172","line":18,"column":5,"nodeType":"173","messageId":"174","endLine":18,"endColumn":16},{"ruleId":"171","severity":1,"message":"172","line":37,"column":5,"nodeType":"173","messageId":"174","endLine":37,"endColumn":16},{"ruleId":"171","severity":1,"message":"172","line":38,"column":5,"nodeType":"173","messageId":"174","endLine":38,"endColumn":16},{"ruleId":"171","severity":1,"message":"172","line":53,"column":7,"nodeType":"173","messageId":"174","endLine":53,"endColumn":18},{"ruleId":"171","severity":1,"message":"172","line":21,"column":7,"nodeType":"173","messageId":"174","endLine":21,"endColumn":18},{"ruleId":"171","severity":1,"message":"172","line":35,"column":5,"nodeType":"173","messageId":"174","endLine":35,"endColumn":16},{"ruleId":"171","severity":1,"message":"172","line":62,"column":7,"nodeType":"173","messageId":"174","endLine":62,"endColumn":18},{"ruleId":"171","severity":1,"message":"172","line":8,"column":3,"nodeType":"173","messageId":"174","endLine":8,"endColumn":14},{"ruleId":"171","severity":1,"message":"172","line":83,"column":5,"nodeType":"173","messageId":"174","endLine":83,"endColumn":16},{"ruleId":"171","severity":1,"message":"172","line":58,"column":5,"nodeType":"173","messageId":"174","endLine":58,"endColumn":16},{"ruleId":"171","severity":1,"message":"172","line":39,"column":3,"nodeType":"173","messageId":"174","endLine":39,"endColumn":14},{"ruleId":"171","severity":1,"message":"172","line":61,"column":5,"nodeType":"173","messageId":"174","endLine":61,"endColumn":16},{"ruleId":"171","severity":1,"message":"172","line":62,"column":5,"nodeType":"173","messageId":"174","endLine":62,"endColumn":16},{"ruleId":"171","severity":1,"message":"172","line":10,"column":3,"nodeType":"173","messageId":"174","endLine":10,"endColumn":14},{"ruleId":"171","severity":1,"message":"172","line":26,"column":3,"nodeType":"173","messageId":"174","endLine":26,"endColumn":14},"no-console","Unexpected console statement.","MemberExpression","unexpected"]